;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name cljs-browser-repl.ui.repl-input, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :uses nil, :defs {resize {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/ui/repl_input.cljs", :line 4, :column 7, :end-line 4, :end-column 13, :arglists (quote ([node]))}, :name cljs-browser-repl.ui.repl-input/resize, :variadic false, :file "src/cljs_browser_repl/ui/repl_input.cljs", :end-column 13, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, enter? {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/ui/repl_input.cljs", :line 8, :column 7, :end-line 8, :end-column 13, :arglists (quote ([e])), :doc "Is an event the Enter key?"}, :name cljs-browser-repl.ui.repl-input/enter?, :variadic false, :file "src/cljs_browser_repl/ui/repl_input.cljs", :end-column 13, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :doc "Is an event the Enter key?"}, escape? {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/ui/repl_input.cljs", :line 12, :column 7, :end-line 12, :end-column 14, :arglists (quote ([e])), :doc "Is an event the Esc key?"}, :name cljs-browser-repl.ui.repl-input/escape?, :variadic false, :file "src/cljs_browser_repl/ui/repl_input.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :doc "Is an event the Esc key?"}, get-val {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/ui/repl_input.cljs", :line 16, :column 7, :end-line 16, :end-column 14, :arglists (quote ([e]))}, :name cljs-browser-repl.ui.repl-input/get-val, :variadic false, :file "src/cljs_browser_repl/ui/repl_input.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, enter-pressed! {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/ui/repl_input.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([e valid? send-input])), :doc "When shift+enter adds a new line. When only enter if the input is valid it\n  runs the callback function and clears value and triggers the resize. If the\n  input is not valid i'll do as if it was a shift+enter"}, :name cljs-browser-repl.ui.repl-input/enter-pressed!, :variadic false, :file "src/cljs_browser_repl/ui/repl_input.cljs", :end-column 21, :method-params ([e valid? send-input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([e valid? send-input])), :doc "When shift+enter adds a new line. When only enter if the input is valid it\n  runs the callback function and clears value and triggers the resize. If the\n  input is not valid i'll do as if it was a shift+enter"}, repl-input-raw {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/ui/repl_input.cljs", :line 29, :column 8, :end-line 29, :end-column 22, :private true, :arglists (quote ([{:keys [pre-label on-change on-valid-input valid-input? value]}]))}, :private true, :name cljs-browser-repl.ui.repl-input/repl-input-raw, :variadic false, :file "src/cljs_browser_repl/ui/repl_input.cljs", :end-column 22, :method-params ([p__26295]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [pre-label on-change on-valid-input valid-input? value]}]))}, repl-input {:name cljs-browser-repl.ui.repl-input/repl-input, :file "src/cljs_browser_repl/ui/repl_input.cljs", :line 47, :column 1, :end-line 47, :end-column 16, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/ui/repl_input.cljs", :line 47, :column 6, :end-line 47, :end-column 16}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:valid-input? :placeholder :span.repl-input-pre :value :component-did-update :pre-label :rows :div.repl-input :on-valid-input :textarea.repl-input-input :on-change :on-key-down}, :order [:pre-label :on-change :on-valid-input :valid-input? :value :div.repl-input :span.repl-input-pre :textarea.repl-input-input :on-key-down :placeholder :rows :component-did-update]}, :doc nil}