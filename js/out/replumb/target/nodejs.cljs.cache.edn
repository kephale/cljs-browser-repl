;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name replumb.target.nodejs, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :uses nil, :defs {init-fn! {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/target/nodejs.cljs", :line 4, :column 7, :end-line 4, :end-column 15, :arglists (quote ([]))}, :name replumb.target.nodejs/init-fn!, :variadic false, :file "resources/public/js/out/replumb/target/nodejs.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, filename->lang {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/target/nodejs.cljs", :line 12, :column 8, :end-line 12, :end-column 22, :private true, :arglists (quote ([filename])), :doc "Converts a filename to a lang keyword by inspecting the file\n  extension."}, :private true, :name replumb.target.nodejs/filename->lang, :variadic false, :file "resources/public/js/out/replumb/target/nodejs.cljs", :end-column 22, :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename])), :doc "Converts a filename to a lang keyword by inspecting the file\n  extension."}, read-some {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/target/nodejs.cljs", :line 20, :column 8, :end-line 20, :end-column 17, :private true, :arglists (quote ([[filename & more-filenames] read-file-fn cb])), :doc "Reads the first filename in a sequence of supplied filenames,\n  using a supplied read-file-fn, calling back upon first successful\n  read, otherwise calling back with nil."}, :private true, :name replumb.target.nodejs/read-some, :variadic false, :file "resources/public/js/out/replumb/target/nodejs.cljs", :end-column 17, :method-params ([p__13057 read-file-fn cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[filename & more-filenames] read-file-fn cb])), :doc "Reads the first filename in a sequence of supplied filenames,\n  using a supplied read-file-fn, calling back upon first successful\n  read, otherwise calling back with nil."}, filenames-to-try {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/target/nodejs.cljs", :line 35, :column 8, :end-line 35, :end-column 24, :private true, :arglists (quote ([src-paths macros path])), :doc "Produces a sequence of filenames to try reading, in the\n  order they should be tried."}, :private true, :name replumb.target.nodejs/filenames-to-try, :variadic false, :file "resources/public/js/out/replumb/target/nodejs.cljs", :end-column 24, :method-params ([src-paths macros path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([src-paths macros path])), :doc "Produces a sequence of filenames to try reading, in the\n  order they should be tried."}, make-load-fn {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/target/nodejs.cljs", :line 46, :column 7, :end-line 46, :end-column 19, :arglists (quote ([src-paths read-file-fn])), :doc "Makes a load function that will read from a sequence of src-paths\n  using a supplied read-file-fn. It returns a cljs.js-compatible\n  *load-fn*.\n\n  Read-file-fn is a 2-arity function (fn [filename source-cb] ...) where\n  source-cb is itself a function (fn [source] ...) that needs to be called\n  with the source of the library (as string)."}, :name replumb.target.nodejs/make-load-fn, :variadic false, :file "resources/public/js/out/replumb/target/nodejs.cljs", :end-column 19, :method-params ([src-paths read-file-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src-paths read-file-fn])), :doc "Makes a load function that will read from a sequence of src-paths\n  using a supplied read-file-fn. It returns a cljs.js-compatible\n  *load-fn*.\n\n  Read-file-fn is a 2-arity function (fn [filename source-cb] ...) where\n  source-cb is itself a function (fn [source] ...) that needs to be called\n  with the source of the library (as string)."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:path :js :macros :source :lang :clj}, :order [:js :clj :lang :source :macros :path]}, :doc nil}