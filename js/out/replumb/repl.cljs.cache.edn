;; Analyzed by ClojureScript 1.7.170
{:use-macros {with-compiler-env cljs.env.macros}, :excludes #{load-file}, :name replumb.repl, :imports nil, :requires {cljs cljs.js, load replumb.load, cljs.tools.reader cljs.tools.reader, replumb.load replumb.load, tags cljs.tagged-literals, r cljs.tools.reader, cljs.js cljs.js, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, cljs.env cljs.env, ana cljs.analyzer, browser replumb.browser, docs replumb.doc-maps, cljs.pprint cljs.pprint, cljs.tagged-literals cljs.tagged-literals, nodejs replumb.nodejs, env cljs.env, replumb.doc-maps replumb.doc-maps, replumb.browser replumb.browser, cljs.analyzer cljs.analyzer, common replumb.common, cljs.repl cljs.repl, rt cljs.tools.reader.reader-types, replumb.nodejs replumb.nodejs, repl cljs.repl, replumb.common replumb.common}, :uses {pprint cljs.pprint}, :defs {get-namespace {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 45, :column 7, :end-line 45, :end-column 20, :arglists (quote ([sym]))}, :name replumb.repl/get-namespace, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 20, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, success-map {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 292, :column 7, :end-line 292, :end-column 18, :arglists (quote ([opts form warning value])), :doc "Builds the map to return when the evaluation returned success.\n  Supports the following options:\n\n  * :no-pr-str-on-value avoids wrapping value in pr-str."}, :name replumb.repl/success-map, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 18, :method-params ([opts form warning value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts form warning value])), :doc "Builds the map to return when the evaluation returned success.\n  Supports the following options:\n\n  * :no-pr-str-on-value avoids wrapping value in pr-str."}, valid-opts {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 237, :column 7, :end-line 237, :end-column 17, :arglists (quote ([user-opts])), :doc "Validate the input user options. Returns a new map without invalid\n  ones according to valid-opts-set."}, :name replumb.repl/valid-opts, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 17, :method-params ([user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 1, :fn-var true, :arglists (quote ([user-opts])), :doc "Validate the input user options. Returns a new map without invalid\n  ones according to valid-opts-set."}, purge-ns-analysis-cache! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 153, :column 7, :end-line 153, :end-column 31, :arglists (quote ([st ns]))}, :name replumb.repl/purge-ns-analysis-cache!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 31, :method-params ([st ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st ns]))}, fetch-source {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 519, :column 7, :end-line 519, :end-column 19, :arglists (quote ([{:keys [verbose read-file-fn!]} var paths-to-try cb]))}, :name replumb.repl/fetch-source, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 19, :method-params ([p__14446 var paths-to-try cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 519, :end-line 519, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [verbose read-file-fn!]} var paths-to-try cb]))}, make-load-fn {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 205, :column 7, :end-line 205, :end-column 19, :arglists (quote ([verbose? src-paths read-file-fn])), :doc "Makes a load function that will read from a sequence of src-paths\n  using a supplied read-file-fn. It returns a cljs.js-compatible\n  *load-fn*.\n\n  Read-file-fn is an async 2-arity function (fn [file-path src-cb] ...)\n  where src-cb is itself a function (fn [source] ...) that needs to be\n  called with the full source of the library (as string)."}, :name replumb.repl/make-load-fn, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 19, :method-params ([verbose? src-paths read-file-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 3, :fn-var true, :arglists (quote ([verbose? src-paths read-file-fn])), :doc "Makes a load function that will read from a sequence of src-paths\n  using a supplied read-file-fn. It returns a cljs.js-compatible\n  *load-fn*.\n\n  Read-file-fn is an async 2-arity function (fn [file-path src-cb] ...)\n  where src-cb is itself a function (fn [source] ...) that needs to be\n  called with the full source of the library (as string)."}, reset-env! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 727, :column 7, :end-line 727, :end-column 17, :arglists (quote ([] [namespaces])), :doc "It does the following (in order):\n\n  1. remove the input namespaces from the compiler environment\n  2. set *e to nil\n  3. reset the last warning\n  4. in-ns to cljs.user\n\n  It accepts a sequence of symbols or strings.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [namespaces]), :arglists ([] [namespaces]), :arglists-meta (nil nil)}}, :name replumb.repl/reset-env!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [namespaces]), :arglists ([] [namespaces]), :arglists-meta (nil nil)}, :method-params ([] [namespaces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 727, :end-line 727, :max-fixed-arity 1, :fn-var true, :arglists ([] [namespaces]), :doc "It does the following (in order):\n\n  1. remove the input namespaces from the compiler environment\n  2. set *e to nil\n  3. reset the last warning\n  4. in-ns to cljs.user\n\n  It accepts a sequence of symbols or strings."}, validated-call-back! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 330, :column 7, :end-line 330, :end-column 27, :arglists (quote ([call-back! res]))}, :name replumb.repl/validated-call-back!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 27, :method-params ([call-back! res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 2, :fn-var true, :arglists (quote ([call-back! res]))}, custom-warning-handler {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 317, :column 7, :end-line 317, :end-column 29, :arglists (quote ([opts cb warning-type env extra])), :doc "Handles the case when the evaluation returns a warning and can be\n  passed as a warning handler when partially applied. At the moment it\n  treats warnings as errors."}, :name replumb.repl/custom-warning-handler, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 29, :method-params ([opts cb warning-type env extra]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 5, :fn-var true, :arglists (quote ([opts cb warning-type env extra])), :doc "Handles the case when the evaluation returns a warning and can be\n  passed as a warning handler when partially applied. At the moment it\n  treats warnings as errors."}, repl-read-string {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 59, :column 7, :end-line 59, :end-column 23, :arglists (quote ([line])), :doc "Try to read a string binding all the standard data readers. This\n  function throws if a valid form cannot be found."}, :name replumb.repl/repl-read-string, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 23, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line])), :doc "Try to read a string binding all the standard data readers. This\n  function throws if a valid form cannot be found."}, make-ns-form {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 174, :column 7, :end-line 174, :end-column 19, :arglists (quote ([kind specs target-ns]))}, :name replumb.repl/make-ns-form, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 19, :method-params ([kind specs target-ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 3, :fn-var true, :arglists (quote ([kind specs target-ns]))}, process-in-ns {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 488, :column 7, :end-line 488, :end-column 20, :arglists (quote ([opts cb data ns-string]))}, :name replumb.repl/process-in-ns, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 20, :method-params ([opts cb data ns-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 488, :end-line 488, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data ns-string]))}, reset-last-warning! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 313, :column 7, :end-line 313, :end-column 26, :arglists (quote ([]))}, :name replumb.repl/reset-last-warning!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, process-doc {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 462, :column 7, :end-line 462, :end-column 18, :arglists (quote ([opts cb data env sym]))}, :name replumb.repl/process-doc, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 18, :method-params ([opts cb data env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 462, :end-line 462, :max-fixed-arity 5, :fn-var true, :arglists (quote ([opts cb data env sym]))}, normalize-opts {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 277, :column 7, :end-line 277, :end-column 21, :arglists (quote ([user-opts])), :doc "Process the user options. Returns the map that can be fed to\n  read-eval-call."}, :name replumb.repl/normalize-opts, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 21, :method-params ([user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 1, :fn-var true, :arglists (quote ([user-opts])), :doc "Process the user options. Returns the map that can be fed to\n  read-eval-call."}, call-back! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 388, :column 7, :end-line 388, :end-column 17, :arglists (quote ([opts cb res] [opts cb data res])), :doc "Handles the evaluation result, calling the callback in the right way,\n  based on the success or error of the evaluation. The res parameter\n  expects the same map as ClojureScript's cljs.js callback,\n  :value if success and :error if not. The data parameter might contain\n  additional stuff:\n\n  * :form the source form that has been eval-ed\n  * :on-success-fn! 0-arity function that will be executed on success\n  * :on-error-fn! 0-arity function that will be executed on error\n  * :side-effect-fn! 0-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!\n\n  Call-back! supports the following opts:\n\n  * :verbose will enable the the evaluation logging, defaults to false.\n  * :no-pr-str-on-value avoids wrapping successful value in a pr-str\n  * :warning-as-error will consider a warning like an error\n\n  Notes:\n  1. The opts map passed here overrides the environment options.\n  2. This function will also clear the :last-eval-warning flag in\n  app-env.\n  3. It will execute (:side-effect-fn!) or (on-success-fn!)\n  and (on-error-fn!)  *before* the callback is called.\n\n  ** Every function in this namespace should call call-back! as\n  single point of exit. **", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([opts cb res] [opts cb data res]), :arglists ([opts cb res] [opts cb data res]), :arglists-meta (nil nil)}}, :name replumb.repl/call-back!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([opts cb res] [opts cb data res]), :arglists ([opts cb res] [opts cb data res]), :arglists-meta (nil nil)}, :method-params ([opts cb res] [opts cb data res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 388, :end-line 388, :max-fixed-arity 4, :fn-var true, :arglists ([opts cb res] [opts cb data res]), :doc "Handles the evaluation result, calling the callback in the right way,\n  based on the success or error of the evaluation. The res parameter\n  expects the same map as ClojureScript's cljs.js callback,\n  :value if success and :error if not. The data parameter might contain\n  additional stuff:\n\n  * :form the source form that has been eval-ed\n  * :on-success-fn! 0-arity function that will be executed on success\n  * :on-error-fn! 0-arity function that will be executed on error\n  * :side-effect-fn! 0-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!\n\n  Call-back! supports the following opts:\n\n  * :verbose will enable the the evaluation logging, defaults to false.\n  * :no-pr-str-on-value avoids wrapping successful value in a pr-str\n  * :warning-as-error will consider a warning like an error\n\n  Notes:\n  1. The opts map passed here overrides the environment options.\n  2. This function will also clear the :last-eval-warning flag in\n  app-env.\n  3. It will execute (:side-effect-fn!) or (on-success-fn!)\n  and (on-error-fn!)  *before* the callback is called.\n\n  ** Every function in this namespace should call call-back! as\n  single point of exit. **"}, error-map {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 305, :column 7, :end-line 305, :end-column 16, :arglists (quote ([opts form warning error])), :doc "Builds the map to return when the evaluation returned error."}, :name replumb.repl/error-map, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 16, :method-params ([opts form warning error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts form warning error])), :doc "Builds the map to return when the evaluation returned error."}, init-closure-index! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 578, :column 7, :end-line 578, :end-column 26, :arglists (quote ([opts])), :doc "Create and swap in app-env a map from Google Closure provide string\n  to their respective path (without extension).  It merges with the\n  current map if many deps.js are on the source path, precedence to the\n  last (as per merge)."}, :name replumb.repl/init-closure-index!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 26, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Create and swap in app-env a map from Google Closure provide string\n  to their respective path (without extension).  It merges with the\n  current map if many deps.js are on the source path, precedence to the\n  last (as per merge)."}, ns-form? {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 66, :column 7, :end-line 66, :end-column 15, :arglists (quote ([form]))}, :name replumb.repl/ns-form?, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 15, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, init-repl-if-necessary! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 636, :column 7, :end-line 636, :end-column 30, :arglists (quote ([opts data]))}, :name replumb.repl/init-repl-if-necessary!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 30, :method-params ([opts data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 636, :end-line 636, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts data]))}, self-require? {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 131, :column 7, :end-line 131, :end-column 20, :arglists (quote ([specs]))}, :name replumb.repl/self-require?, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 20, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, update-to-initializing {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 618, :column 7, :end-line 618, :end-column 29, :arglists (quote ([old-app-env]))}, :name replumb.repl/update-to-initializing, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 29, :method-params ([old-app-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 618, :end-line 618, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-app-env]))}, process-pst {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 475, :column 7, :end-line 475, :end-column 18, :arglists (quote ([opts cb data expr]))}, :name replumb.repl/process-pst, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 18, :method-params ([opts cb data expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data expr]))}, add-init-fns {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 268, :column 7, :end-line 268, :end-column 19, :arglists (quote ([opts user-opts])), :doc "Given current and user options, returns a map containing a\n  valid :init-fns,conjoining with the one in current if necessary."}, :name replumb.repl/add-init-fns, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 19, :method-params ([opts user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts user-opts])), :doc "Given current and user options, returns a map containing a\n  valid :init-fns,conjoining with the one in current if necessary."}, add-default-opts {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 243, :column 7, :end-line 243, :end-column 23, :arglists (quote ([opts user-opts])), :doc "Given user provided options, conjoins the default option map for\n  its :target (string or keyword). Defaults to conjoining :default (browser,\n  aka :js target)."}, :name replumb.repl/add-default-opts, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 23, :method-params ([opts user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts user-opts])), :doc "Given user provided options, conjoins the default option map for\n  its :target (string or keyword). Defaults to conjoining :default (browser,\n  aka :js target)."}, purge-ns! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 157, :column 7, :end-line 157, :end-column 16, :arglists (quote ([st ns]))}, :name replumb.repl/purge-ns!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 16, :method-params ([st ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st ns]))}, get-var {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 96, :column 7, :end-line 96, :end-column 14, :arglists (quote ([opts env sym]))}, :name replumb.repl/get-var, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 14, :method-params ([opts env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts env sym]))}, map-keys {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([f m]))}, :name replumb.repl/map-keys, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 15, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m]))}, process-source {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 536, :column 7, :end-line 536, :end-column 21, :arglists (quote ([opts cb data env sym]))}, :name replumb.repl/process-source, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 21, :method-params ([opts cb data env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 536, :end-line 536, :max-fixed-arity 5, :fn-var true, :arglists (quote ([opts cb data env sym]))}, add-load-fn {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 252, :column 7, :end-line 252, :end-column 18, :arglists (quote ([opts user-opts])), :doc "Given current and user options, if :load-fn! is present in user-opts,\n  conjoins it. Try to create and conjoin one from :src-paths\n  and :read-file-fn! otherwise. Conjoins nil if it cannot."}, :name replumb.repl/add-load-fn, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 18, :method-params ([opts user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts user-opts])), :doc "Given current and user options, if :load-fn! is present in user-opts,\n  conjoins it. Try to create and conjoin one from :src-paths\n  and :read-file-fn! otherwise. Conjoins nil if it cannot."}, repl-special? {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 111, :column 7, :end-line 111, :end-column 20, :arglists (quote ([form]))}, :name replumb.repl/repl-special?, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 20, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, process-require {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 438, :column 7, :end-line 438, :end-column 22, :arglists (quote ([opts cb data kind specs]))}, :name replumb.repl/process-require, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 22, :method-params ([opts cb data kind specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 438, :end-line 438, :max-fixed-arity 5, :fn-var true, :arglists (quote ([opts cb data kind specs]))}, validated-init-fn! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 343, :column 7, :end-line 343, :end-column 25, :arglists (quote ([init-fn! res]))}, :name replumb.repl/validated-init-fn!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 25, :method-params ([init-fn! res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init-fn! res]))}, goog-deps-map {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 190, :column 7, :end-line 190, :end-column 20, :arglists (quote ([deps-js-content])), :doc "Given the content of goog/deps.js file, create a map\n  provide->path (without extension) of Google dependencies.\n\n  Adapted from planck:\n  https://github.com/mfikes/planck/blob/master/planck-cljs/src/planck/repl.cljs#L438-L451"}, :name replumb.repl/goog-deps-map, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 20, :method-params ([deps-js-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deps-js-content])), :doc "Given the content of goog/deps.js file, create a map\n  provide->path (without extension) of Google dependencies.\n\n  Adapted from planck:\n  https://github.com/mfikes/planck/blob/master/planck-cljs/src/planck/repl.cljs#L438-L451"}, warning-error-map! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 361, :column 7, :end-line 361, :end-column 25, :arglists (quote ([opts {:keys [error], :as orig}])), :doc "Checks if there has been a warning and if so will return a new result\n  map instead of the input one, potentially with a :warning key\n  containing the warning message in it.\n\n  The code paths are the following:\n\n  - if the input map was already an :error, there will be no warning,\n  the original :error is returned.\n  - if the input map was a :value:\n    - if (:warning-as-error opts) is truey, the new map will always\n      contain it as :error, overriding the original.\n    - if (:warning-as-error opts) is falsey, the new map will contain\n      the warning as :warning along with the original :value"}, :name replumb.repl/warning-error-map!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 25, :method-params ([opts p__14420]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 361, :end-line 361, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts {:keys [error], :as orig}])), :doc "Checks if there has been a warning and if so will return a new result\n  map instead of the input one, potentially with a :warning key\n  containing the warning message in it.\n\n  The code paths are the following:\n\n  - if the input map was already an :error, there will be no warning,\n  the original :error is returned.\n  - if the input map was a :value:\n    - if (:warning-as-error opts) is truey, the new map will always\n      contain it as :error, overriding the original.\n    - if (:warning-as-error opts) is falsey, the new map will contain\n      the warning as :warning along with the original :value"}, get-goog-path {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 49, :column 7, :end-line 49, :end-column 20, :arglists (quote ([provide])), :doc "Given a Google Closure provide / Clojure require (e.g. goog.string),\n  returns the path to the actual file (without extension)."}, :name replumb.repl/get-goog-path, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 20, :method-params ([provide]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([provide])), :doc "Given a Google Closure provide / Clojure require (e.g. goog.string),\n  returns the path to the actual file (without extension)."}, init-repl! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 599, :column 7, :end-line 599, :end-column 17, :arglists (quote ([opts data])), :doc "The init-repl function. It uses the following opts keys:\n\n  * :init-fns initialization function vector, it will be executed in\n  order\n\n  Data is passed from outside and will be forwarded to :init-fn!."}, :name replumb.repl/init-repl!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 17, :method-params ([opts data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 599, :end-line 599, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts data])), :doc "The init-repl function. It uses the following opts keys:\n\n  * :init-fns initialization function vector, it will be executed in\n  order\n\n  Data is passed from outside and will be forwarded to :init-fn!."}, known-namespaces {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 41, :column 7, :end-line 41, :end-column 23, :arglists (quote ([]))}, :name replumb.repl/known-namespaces, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, process-1-2-3 {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 566, :column 7, :end-line 566, :end-column 20, :arglists (quote ([data expression-form value]))}, :name replumb.repl/process-1-2-3, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 20, :method-params ([data expression-form value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 566, :end-line 566, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data expression-form value]))}, extract-namespace {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 70, :column 7, :end-line 70, :end-column 24, :arglists (quote ([source]))}, :name replumb.repl/extract-namespace, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 24, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source]))}, reset-init-state {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 631, :column 7, :end-line 631, :end-column 23, :arglists (quote ([old-app-env]))}, :name replumb.repl/reset-init-state, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 23, :method-params ([old-app-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 631, :end-line 631, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-app-env]))}, valid-opts-set {:name replumb.repl/valid-opts-set, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 232, :column 1, :end-line 232, :end-column 20, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 232, :column 6, :end-line 232, :end-column 20}, :doc "Set of valid option used for external input validation."}, call-side-effect! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 351, :column 7, :end-line 351, :end-column 24, :arglists (quote ([data {:keys [value error]}])), :doc "Execute the correct side effecting function from data.\n  Handles :side-effect-fn!, :on-error-fn! and on-success-fn!."}, :name replumb.repl/call-side-effect!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 24, :method-params ([data p__14415]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data {:keys [value error]}])), :doc "Execute the correct side effecting function from data.\n  Handles :side-effect-fn!, :on-error-fn! and on-success-fn!."}, update-to-initialized {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 625, :column 7, :end-line 625, :end-column 28, :arglists (quote ([old-app-env]))}, :name replumb.repl/update-to-initialized, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 28, :method-params ([old-app-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 625, :end-line 625, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-app-env]))}, ex-info-data {:name replumb.repl/ex-info-data, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 34, :column 1, :end-line 34, :end-column 18, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 34, :column 6, :end-line 34, :end-column 18}, :doc "The ex-info data for this file"}, st {:name replumb.repl/st, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 23, :column 1, :end-line 23, :end-column 12, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 23, :column 10, :end-line 23, :end-column 12}}, current-ns {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 36, :column 7, :end-line 36, :end-column 17, :arglists (quote ([])), :doc "Return the current namespace, as a symbol."}, :name replumb.repl/current-ns, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current namespace, as a symbol."}, force-init! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 642, :column 7, :end-line 642, :end-column 18, :arglists (quote ([])), :doc "Force the initialization at the next read-eval-call. Use this every\n  time an option that needs to be read at initialization time changes,\n  e.g. :source-path. In the future this will be automated."}, :name replumb.repl/force-init!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 642, :end-line 642, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Force the initialization at the next read-eval-call. Use this every\n  time an option that needs to be read at initialization time changes,\n  e.g. :source-path. In the future this will be automated."}, app-env {:name replumb.repl/app-env, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 25, :column 1, :end-line 25, :end-column 17, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 25, :column 10, :end-line 25, :end-column 17}}, process-repl-special {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 551, :column 7, :end-line 551, :end-column 27, :arglists (quote ([opts cb data expression-form]))}, :name replumb.repl/process-repl-special, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 27, :method-params ([opts cb data expression-form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 551, :end-line 551, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data expression-form]))}, make-base-eval-opts! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 115, :column 7, :end-line 115, :end-column 27, :arglists (quote ([] [opts])), :doc "Gets the base set of evaluation options. The 1-arity function\n  specifies opts that override default. No check here if opts are\n  valid.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name replumb.repl/make-base-eval-opts!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :doc "Gets the base set of evaluation options. The 1-arity function\n  specifies opts that override default. No check here if opts are\n  valid."}, resolve {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 76, :column 7, :end-line 76, :end-column 14, :arglists (quote ([opts env sym])), :doc "From cljs.analizer.api.clj. Given an analysis environment resolve a\n  var. Analogous to clojure.core/resolve"}, :name replumb.repl/resolve, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 14, :method-params ([opts env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts env sym])), :doc "From cljs.analizer.api.clj. Given an analysis environment resolve a\n  var. Analogous to clojure.core/resolve"}, replumb-repl-special-set {:name replumb.repl/replumb-repl-special-set, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 108, :column 1, :end-line 108, :end-column 30, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 108, :column 6, :end-line 108, :end-column 30}}, process-reloads! {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 162, :column 7, :end-line 162, :end-column 23, :arglists (quote ([specs]))}, :name replumb.repl/process-reloads!, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 23, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, canonicalize-specs {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 143, :column 7, :end-line 143, :end-column 25, :arglists (quote ([specs]))}, :name replumb.repl/canonicalize-specs, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 25, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, read-eval-call {:protocol-inline nil, :meta {:file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :line 653, :column 7, :end-line 653, :end-column 21, :arglists (quote ([opts cb source])), :doc "Reads, evaluates and calls back with the evaluation result.\n\n  The first parameter is a map of configuration options, currently\n  supporting:\n\n  * :verbose - will enable the the evaluation logging, defaults to false\n  * :warning-as-error - will consider a compiler warning as error\n  * :target - :nodejs and :browser supported, the latter is used if\n  missing\n  * :init-fn! - user provided initialization function, it will be passed\n  a map of data currently containing:\n\n      :form   ;; the form to evaluate, as data, past the reader step\n      :ns     ;; the current namespace, as symbol\n      :target ;; *target* as keyword, :default is the default\n\n  * :load-fn! - will override replumb's default cljs.js/*load-fn*.\n  It rules out `:read-file-fn!`, losing any perk of using replumb.load\n  helpers. Use it if you know what you are doing.\n\n  * :read-file-fn!  an asynchronous 2-arity function (fn [file-path\n  src-cb] ...) where src-cb is itself a function (fn [source] ...)  that\n  needs to be called when ready with the found file source as\n  string (nil if no file is found). It is mutually exclusive with\n  :load-fn! and will be ignored in case both are present.\n\n  * :src-paths - a vector of paths containing source files.\n\n  The second parameter cb, is a 1-arity function which receives the\n  result map.\n\n  Therefore, given cb (fn [result-map] ...), the main map keys are:\n\n  :success? ;; a boolean indicating if everything went right\n  :value    ;; (if (success? result)) will contain the actual yield of the evaluation\n  :error    ;; (if (not (success? result)) will contain a js/Error\n  :warning  ;; in case a warning was thrown and :warning-as-error is falsey\n  :form     ;; the evaluated form as data structure (not a string)\n\n  The third parameter is the source string to be read and evaluated.\n\n  It initializes the repl harness if necessary."}, :name replumb.repl/read-eval-call, :variadic false, :file "file:/Users/kyle/.m2/repository/replumb/replumb/0.1.3/replumb-0.1.3.jar!/replumb/repl.cljs", :end-column 21, :method-params ([opts cb source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 653, :end-line 653, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts cb source])), :doc "Reads, evaluates and calls back with the evaluation result.\n\n  The first parameter is a map of configuration options, currently\n  supporting:\n\n  * :verbose - will enable the the evaluation logging, defaults to false\n  * :warning-as-error - will consider a compiler warning as error\n  * :target - :nodejs and :browser supported, the latter is used if\n  missing\n  * :init-fn! - user provided initialization function, it will be passed\n  a map of data currently containing:\n\n      :form   ;; the form to evaluate, as data, past the reader step\n      :ns     ;; the current namespace, as symbol\n      :target ;; *target* as keyword, :default is the default\n\n  * :load-fn! - will override replumb's default cljs.js/*load-fn*.\n  It rules out `:read-file-fn!`, losing any perk of using replumb.load\n  helpers. Use it if you know what you are doing.\n\n  * :read-file-fn!  an asynchronous 2-arity function (fn [file-path\n  src-cb] ...) where src-cb is itself a function (fn [source] ...)  that\n  needs to be called when ready with the found file source as\n  string (nil if no file is found). It is mutually exclusive with\n  :load-fn! and will be ignored in case both are present.\n\n  * :src-paths - a vector of paths containing source files.\n\n  The second parameter cb, is a 1-arity function which receives the\n  result map.\n\n  Therefore, given cb (fn [result-map] ...), the main map keys are:\n\n  :success? ;; a boolean indicating if everything went right\n  :value    ;; (if (success? result)) will contain the actual yield of the evaluation\n  :error    ;; (if (not (success? result)) will contain a js/Error\n  :warning  ;; in case a warning was thrown and :warning-as-error is falsey\n  :form     ;; the evaluated form as data structure (not a string)\n\n  The third parameter is the source string to be read and evaluated.\n\n  It initializes the repl harness if necessary."}}, :require-macros {cljs.env.macros cljs.env.macros}, :cljs.analyzer/constants {:seen #{res :load :path :features :read-file-fn! :cljs.analyzer/namespaces doc import :init-fns = :meta :static-fns :else *2 find :macros :default :ns :def-emits-var :name :value cljs.core :file map? get init-fns :side-effect-fn! :require :extra :warning-type empty? :nodejs :read-cond *target* :initializing? string? :verbose old-app-env *1 > pst :source :env :last-eval-warning in-ns :merge :allow ns :column or :goog-provide->path :warning require :no-pr-str-on-value *e :needs-init? :line :expr instance? not source :current-ns env clojure.core/deref :opts :kind :warning-as-error sym :replumb.repl/error :source-map :context :reload :error :reload-all :require-macros load-file :form :load-fn! *3 :tag :res :target quote :import :doc count :success? cljs.js/*loaded* :cljs :on-success-fn! :src-paths cljs.analyzer/*cljs-ns* :init-fn! :on-error-fn! js/Error and symbol? require-macros cljs.user :data :eval}, :order [:current-ns :last-eval-warning :initializing? :needs-init? cljs.user :tag :replumb.repl/error :cljs.analyzer/namespaces :goog-provide->path :read-cond :features :allow :cljs ns map? env symbol? sym :verbose :default :ns cljs.core :name doc import pst in-ns require source load-file require-macros :context :source-map :def-emits-var :load :eval :static-fns :expr :load-fn! :reload :reload-all :import :merge :line :column :macros :path :else :read-file-fn! :warning-as-error :target :src-paths :init-fn! :nodejs :init-fns :success? :form :warning :value :no-pr-str-on-value :error :warning-type :env :extra res find or and get not string? instance? js/Error = *target* :side-effect-fn! :on-success-fn! :on-error-fn! :opts :data :res quote :kind :require :doc *e :source :file :meta :require-macros *2 *1 *3 cljs.analyzer/*cljs-ns* > count init-fns old-app-env empty? clojure.core/deref cljs.js/*loaded*]}, :doc nil}