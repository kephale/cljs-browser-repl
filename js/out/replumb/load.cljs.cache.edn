;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name replumb.load, :imports nil, :requires {string clojure.string, clojure.string clojure.string, common replumb.common, replumb.common replumb.common}, :uses nil, :defs {fake-load-fn! {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/load.cljs", :line 5, :column 7, :end-line 5, :end-column 20, :arglists (quote ([_ cb])), :doc "This load function just calls:\n  (cb {:lang   :js\n       :source \"\"})"}, :name replumb.load/fake-load-fn!, :variadic false, :file "resources/public/js/out/replumb/load.cljs", :end-column 20, :method-params ([_ cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ cb])), :doc "This load function just calls:\n  (cb {:lang   :js\n       :source \"\"})"}, no-resource-load-fn! {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/load.cljs", :line 13, :column 7, :end-line 13, :end-column 27, :arglists (quote ([_ cb])), :doc "Mimics \"Resource not found\" as it just calls: (cb nil)"}, :name replumb.load/no-resource-load-fn!, :variadic false, :file "resources/public/js/out/replumb/load.cljs", :end-column 27, :method-params ([_ cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ cb])), :doc "Mimics \"Resource not found\" as it just calls: (cb nil)"}, filename->lang {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/load.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([file-name])), :doc "Converts a filename to a lang keyword by inspecting the file\n  extension."}, :name replumb.load/filename->lang, :variadic false, :file "resources/public/js/out/replumb/load.cljs", :end-column 21, :method-params ([file-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file-name])), :doc "Converts a filename to a lang keyword by inspecting the file\n  extension."}, read-files-and-callback! {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/load.cljs", :line 26, :column 7, :end-line 26, :end-column 31, :arglists (quote ([verbose? file-names read-file-fn load-fn-cb])), :doc "Loop on the file-names using a supplied read-file-fn (fn [file-name\n  src-cb] ...), calling back cb upon first successful read, otherwise\n  calling back with nil."}, :name replumb.load/read-files-and-callback!, :variadic false, :file "resources/public/js/out/replumb/load.cljs", :end-column 31, :method-params ([verbose? file-names read-file-fn load-fn-cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 4, :fn-var true, :arglists (quote ([verbose? file-names read-file-fn load-fn-cb])), :doc "Loop on the file-names using a supplied read-file-fn (fn [file-name\n  src-cb] ...), calling back cb upon first successful read, otherwise\n  calling back with nil."}, file-paths-to-try {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/load.cljs", :line 45, :column 7, :end-line 45, :end-column 24, :arglists (quote ([src-paths macros file-path])), :doc "Produces a sequence of filenames to try reading, in the\n  order they should be tried."}, :name replumb.load/file-paths-to-try, :variadic false, :file "resources/public/js/out/replumb/load.cljs", :end-column 24, :method-params ([src-paths macros file-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([src-paths macros file-path])), :doc "Produces a sequence of filenames to try reading, in the\n  order they should be tried."}, file-paths-to-try-from-ns-symbol {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/load.cljs", :line 57, :column 7, :end-line 57, :end-column 39, :arglists (quote ([ns-sym src-paths])), :doc "Given the symbol of a namespace produces all possibile file names\n  in which given ns could be found."}, :name replumb.load/file-paths-to-try-from-ns-symbol, :variadic false, :file "resources/public/js/out/replumb/load.cljs", :end-column 39, :method-params ([ns-sym src-paths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ns-sym src-paths])), :doc "Given the symbol of a namespace produces all possibile file names\n  in which given ns could be found."}, goog-file-paths-to-try {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/load.cljs", :line 64, :column 7, :end-line 64, :end-column 29, :arglists (quote ([src-paths goog-path])), :doc "Produces a sequence of filenames to try reading crafted for goog\n  libraries, in the order they should be tried."}, :name replumb.load/goog-file-paths-to-try, :variadic false, :file "resources/public/js/out/replumb/load.cljs", :end-column 29, :method-params ([src-paths goog-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src-paths goog-path])), :doc "Produces a sequence of filenames to try reading crafted for goog\n  libraries, in the order they should be tried."}, skip-load? {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/resources/public/js/out/replumb/load.cljs", :line 71, :column 7, :end-line 71, :end-column 17, :arglists (quote ([{:keys [name macros]}]))}, :name replumb.load/skip-load?, :variadic false, :file "resources/public/js/out/replumb/load.cljs", :end-column 17, :method-params ([p__13043]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [name macros]}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:js :macros :name cljs.core cljs.test :source :lang cljs.pprint cljs.analyzer :clj clojure.template}, :order [:lang :source :js :clj :name :macros cljs.core cljs.analyzer cljs.pprint cljs.test clojure.template]}, :doc nil}