;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name cljs-browser-repl.net.file, :imports nil, :requires {http cljs-http.client, cljs-http.client cljs-http.client, cljs.core.async cljs.core.async, cljs.pprint cljs.pprint, cljs-browser-repl.state cljs-browser-repl.state, edn cljs.reader, cljs.reader cljs.reader}, :uses {pprint cljs.pprint, <! cljs.core.async, chan cljs.core.async, to-repl-error cljs-browser-repl.state}, :defs {get! {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/net/file.cljs", :line 10, :column 7, :end-line 10, :end-column 11, :arglists (quote ([id file-name])), :doc "Retrieves a notebook file by id and file name. Returns a channel that will\n  be filled with a clj-http response {:success true :body ...}"}, :name cljs-browser-repl.net.file/get!, :variadic false, :file "src/cljs_browser_repl/net/file.cljs", :end-column 11, :method-params ([id file-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id file-name])), :doc "Retrieves a notebook file by id and file name. Returns a channel that will\n  be filled with a clj-http response {:success true :body ...}"}, invalid-file {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/net/file.cljs", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([file err]))}, :name cljs-browser-repl.net.file/invalid-file, :variadic false, :file "src/cljs_browser_repl/net/file.cljs", :end-column 19, :method-params ([file err]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([file err]))}, get-commands {:protocol-inline nil, :meta {:file "/Users/kyle/git/cljs-browser-repl/src/cljs_browser_repl/net/file.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([{:keys [success body], :as file}])), :doc "Given a file response it will return a list of commands for the repl to run."}, :name cljs-browser-repl.net.file/get-commands, :variadic false, :file "src/cljs_browser_repl/net/file.cljs", :end-column 19, :method-params ([p__22718]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [success body], :as file}])), :doc "Given a file response it will return a list of commands for the repl to run."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:else :recur :success :content-type :body}, :order [:success :recur :content-type :else :body]}, :doc nil}